Every java program looks for public static void main in order
to successfully compile.

String variable = "This is a string";
variable.contains("This"); <--- True
variable.contains("THIS"); <--- false

upperedWords = variable.toUpperCase();
upperedWords.contains("THIS"); <---- True
loweredWords = variable.toLowerCase(); <--- No capitalized letters

OR FOR 1 LINE METHOD
variable.toUpperCase().contains("THIS"); <--- TRUE

variable.equals("This is a string"); <-- True
variable.equalsIgnoreCase("THIS IS A STRING"); <--- True

Console console = System.console();
console.printf("Hello World"); <--- console prints "Hello World"
console.readLine("Ask me a question: ");
The console waits for input from the user with readLine


String answer = console.readLine("The answer is: ");
Gives the input a variable name

String number = console.readLine("How old are you? ");
int age = number.parseInt(number); 

The above 2 lines turns the string "number" into an integer "age"
that you can now do mathematical stuff with.

boolean example = false || false || true <---- True
boolean example = false && false && true <---- false

boolean doIfTrue; <--- establishes variable exists so you can use

it inside block of code
*** WHEN YOU ESTABLISH A BOOLEAN, BY DEFAULT IT SETS TO FALSE ***
do{
    Some code in here;
    if(doIfTrue){
        do this code if its true;
    }
}while(doIfTrue.equals(false));

private <-- makes values hidden/immutable.
public final <--- makes value public/immutable
public static <-- Makes value public/immutable?
static = const

public static int CONSTANTSAREALWAYSINCAPS = 1;

General rule is to start with private until you need to go public.

CLI ---->>  jshell == python == irb

jshell
/open FileName.java
Filename newVariableName = new classname
newVariableName.methodOrVariableToRunOrCallOrReference <---runs method, gives value, output, etc

incrementing

int number = 1;
number += 1;
=> 2

int number = 2;
number++

=> 2
computer computes
=> 3

int number = 3;
++number

=> 4
=================================================
You can have multiple methods with the same name.
the name for it is "overloaded method"

public void age(){
    System.out.println("We don't have your age.\n");
}

public void age(int age){
    System.out.println("We see you are %i years old.\n", age);
}
================================================

in jshell, you can find the different inputs for examples like
above.

getAge.age(  then press tab returns
getAge.age   but if you  press shift+tab
getAge.age()
getAge.age(int age)

